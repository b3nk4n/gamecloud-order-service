server:
  port: 9002
  shutdown: graceful
  netty:
    connection-timeout: 3s
    idle-timeout: 20s

spring:
  application:
    name: order-service
  lifecycle:
    timeout-per-shutdown-phase: 20s
  config:
    import: "optional:configserver:"
    cloud:
      config:
        uri: http://localhost:8888
        request-connect-timeout: 5000
        request-read-timeout: 3000
        fail-fast: false
        retry:
          max-attempts: 5
          initial-interval: 1000
          max-interval: 5000
          multiplier: 1.5
  r2dbc:
    username: user
    password: password
    url: r2dbc:postgresql://localhost:5432/gamecloud_order
    pool:
      max-create-connection-time: 3s
      initial-size: 5
      max-size: 10
  flyway:
    user: ${spring.r2dbc.username}
    password: ${spring.r2dbc.password}
    url: jdbc:postgresql://localhost:5432/gamecloud_order
  cloud:
    function:
      definition: dispatchOrder
    stream:
      bindings:
        dispatchOrder-in-0:
          destination: order-dispatched
          group: { spring.application.name }
        acceptOrder-out-0: # this binding is used imperatively via StreamBridge, instead of via a Supplier bean
          destination: order-accept
      rabbit:
        acceptOrder-out-0:
          producer:
            transacted: true # that event publishing joins the existing transaction (Saga pattern)

  rabbitmq:
    host: localhost
    port: 5672
    username: user
    password: password
    connection-timeout: 3s

client:
  catalog-service-uri: http://localhost:9001
  timeout: 3s
  retry:
    max-attempts: 3
    min-backoff: 250ms
